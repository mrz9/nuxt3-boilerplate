import { reactive } from 'vue'
import { createApp } from './main'
import { renderToString } from 'vue/server-renderer'
import { renderHeadToString } from '@vueuse/head'
import { basename } from 'path'
import devalue from '@nuxt/devalue'

export async function render(url, manifest) {
    const context = createApp()
    const { app, router, head } = context
    // set the router to the desired URL before rendering
    router.push(url)
    await router.isReady()

    const ctx = {
        data: reactive({}),
    }
    const appHTML = await renderToString(app, ctx)
    // const insertScript = `<script>window.__USE_SSR__=true;</script>`
    // appHTML = insertScript + appHTML
    let { headTags: appHead } = renderHeadToString(head)
    appHead += `<script>window.__KALI_DATA__={data:${devalue(
        ctx.data,
    )}}</script>`
    // the SSR manifest generated by Vite contains module -> chunk/asset mapping
    // which we can then use to determine what files need to be preloaded for this
    // request.
    const preloadLinks = renderPreloadLinks(ctx.modules, manifest)
    return [appHead, appHTML, preloadLinks]
}

function renderPreloadLinks(modules, manifest) {
    let links = ''
    const seen = new Set()
    modules.forEach((id) => {
        const files = manifest[id]
        if (files) {
            files.forEach((file) => {
                if (!seen.has(file)) {
                    seen.add(file)
                    const filename = basename(file)
                    if (manifest[filename]) {
                        for (const depFile of manifest[filename]) {
                            links += renderPreloadLink(depFile)
                            seen.add(depFile)
                        }
                    }
                    links += renderPreloadLink(file)
                }
            })
        }
    })
    return links
}

function renderPreloadLink(file) {
    if (file.endsWith('.js')) {
        return `<link rel="modulepreload" crossorigin href="${file}">`
    } else if (file.endsWith('.css')) {
        return `<link rel="stylesheet" href="${file}">`
    } else if (file.endsWith('.woff')) {
        return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`
    } else if (file.endsWith('.woff2')) {
        return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`
    } else if (file.endsWith('.gif')) {
        return ` <link rel="preload" href="${file}" as="image" type="image/gif">`
    } else if (file.endsWith('.jpg') || file.endsWith('.jpeg')) {
        return ` <link rel="preload" href="${file}" as="image" type="image/jpeg">`
    } else if (file.endsWith('.png')) {
        return ` <link rel="preload" href="${file}" as="image" type="image/png">`
    } else {
        // TODO
        return ''
    }
}
